/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doublePlayer_package;

import UserManage_package.User;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.border.BevelBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.table.DefaultTableModel;
import main_package.MainJFrame;

/**
 *
 * @author Administrator
 */
public class LobbyFrame extends javax.swing.JFrame {

    private User user;
    private Socket socket;
    private ObjectOutputStream writer;
    private ObjectInputStream read;
    private DefaultTableModel tableModel;//在线人数数据
    private String other;//挑战或者发送对话的人
    public static final int POST = 7777;
    public static final String IP = "localhost";

    /**
     * Creates new form LobbyFrame
     */
    public LobbyFrame(User user) {
        this.tableModel = new DefaultTableModel(
                new Object[18][4],
                new String[]{
                    "账号", "用户名", "积分", "等级"
                }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        this.user = user;
        initComponents();
        //设置表格只能单行选择
        jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //为输入框加入边框
        jTextArea1.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
        jTextArea2.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        //设置弹出框无法关闭
        jDialog1.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        jDialog1.setAlwaysOnTop(true);
        setResizable(false);
        connect();//连接服务器
    }
    
    private void connect() {
        try {
            socket = new Socket(IP, POST);
            //向服务器传送用户信息
            writer = new ObjectOutputStream(socket.getOutputStream());
            read = new ObjectInputStream(socket.getInputStream());
            writer.writeObject(user);
            new SocketHandleInfo(socket).start();
        } catch (IOException ex) {
            Logger.getLogger(LobbyFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void setOther(){
        int row = jTable1.getSelectedRow();
        Object logid = jTable1.getValueAt(row, 0);
        Object username=jTable1.getValueAt(row, 1);
        if (logid != null&&username!=null) {
            other = logid.toString()+" "+username.toString();
        }else{
            other=null;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog(this,true);
        jLabel1 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(this.tableModel);
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        blackRadioButton = new javax.swing.JRadioButton();
        whiteRadioButton = new javax.swing.JRadioButton();

        jLabel1.setText("正在等待对方回复......");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap(65, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(51, 51, 51))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(25, 25, 25))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setFocusable(false);
        jScrollPane3.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton1.setText("挑战");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("发送");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(blackRadioButton);
        blackRadioButton.setSelected(true);
        blackRadioButton.setText("执黑");

        buttonGroup1.add(whiteRadioButton);
        whiteRadioButton.setText("执白");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(blackRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(whiteRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(blackRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(whiteRadioButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            writer.close();
            read.close();
        } catch (IOException ex) {
            Logger.getLogger(LobbyFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        new MainJFrame(user).setVisible(true);
        
    }//GEN-LAST:event_formWindowClosing

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String[] to=new String[0];
        setOther();
        if(other!=null)
             to= other.split(" ");
        String msg = jTextArea2.getText();
        String from = user.getUsername();
        String time = new SimpleDateFormat("MM-dd HH:mm").format(new Date());
        if (to.length ==2) {
            try {
                writer.writeObject(new Message(to[0], from, msg, time));
                jTextArea1.append(""+time + "\n你对" + to[1] + "发送了：\n" + msg + "\n\n\n");
                jTextArea2.setText("");
            } catch (IOException ex) {
                Logger.getLogger(LobbyFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        String[] to=new String[0];
        setOther();
        if(other!=null){
            to= other.split(" ");
            try {
                String color="black";
                if(blackRadioButton.isSelected())
                    color="black";
                else if(whiteRadioButton.isSelected())
                    color="white";
                writer.writeObject("CHALENGE:\n"+user.getLogId()+"\n"+user.getUsername()+"\n"+to[0]+"\n"+to[1]+"\n"+color);    
                jDialog1.setSize(200,100);
                jDialog1.setLocation(this.getX()+this.getWidth()/2-200/2, this.getY()+this.getHeight()/2-100/2);
                jDialog1.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(LobbyFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LobbyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LobbyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LobbyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LobbyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                LobbyFrame lf = new LobbyFrame(new User("老wang", "123456789", "6643", 350));
//                lf.setVisible(true);
                LobbyFrame lf1 = new LobbyFrame(new User("老li", "1234", "6643", 50));
                lf1.setVisible(true);
//                LobbyFrame lf2 = new LobbyFrame(new User("老da", "1234532", "6643", 850));
//                lf2.setVisible(true);
            }
        });
    }

    //接受信息的线程
    class SocketHandleInfo extends Thread {

        private Socket socket;
        public SocketHandleInfo(Socket socket) {
            this.socket = socket;
        }
        
        @Override
        public void run() {
            Object oj;
            try {
                while (true) {
                    //读取信息部分
                    oj = read.readObject();
                    //如果读到的是字符串
                    if (String.class.isInstance(oj)) {
                        String receive = (String) oj;
                        String[] spilts = receive.split("\n");
                        //判断开头是不是update，若是则更新在线人数
                        if (spilts[0].equals("UPDATE:")) {
                            tableModel.setRowCount(0);
                            for (int i = 1; i < spilts.length; i++) {
                                //分割获得每个人的用户名、积分和等级
                                System.out.println(spilts[i]);
                                String[] user_info = spilts[i].split(" ");
                                if (!user_info[0].equals(user.getLogId())) {
                                    tableModel.addRow(new Object[]{user_info[0], user_info[1], user_info[2], user_info[3]});
                                }
                            }
                            //添加空缺的部分
                            if (spilts.length - 1 < 18) {
                                for (int i = 0; i < 19  - spilts.length; i++) {
                                    tableModel.addRow(new Object[]{null, null, null, null});
                                }
                            }
                            tableModel.fireTableDataChanged();
                        }
                        if(spilts[0].equals("CHALENGE:")){
                            String color=spilts[5].equals("black")?"执白":"执黑";
                            int y_n=JOptionPane.showConfirmDialog(jTextArea1, spilts[2]+"向您发起挑战，您"+color+"，是否接受？","挑战请求",JOptionPane.YES_NO_OPTION);
                            if(y_n==0){
                                writer.writeObject(receive.replace("CHALENGE:", "ACCEPT:"));
                                JOptionPane.showMessageDialog(jTextArea1, "即将开始下棋");
                                writer.writeObject("EXIT");
                                dispose();
                                new PlayerCompeteJFrame(spilts[3]+"\n"+spilts[1]+" "+(spilts[5].equals("black")?"1":"0")).setVisible(true);
                            }else if(y_n==1||y_n==-1){
                                writer.writeObject(receive.replace("CHALENGE:", "REFUSE:"));
                            }
                        }else if(spilts[0].equals("REFUSE:")){
                            jDialog1.setAutoRequestFocus(false);
                            jDialog1.setVisible(false);
                            JOptionPane.showMessageDialog(jTextArea1, spilts[4]+"拒绝了您的请求");
                        }else if(spilts[0].equals("ACCEPT:")){
                            jDialog1.setAutoRequestFocus(false);
                            jDialog1.setVisible(false);
                            JOptionPane.showMessageDialog(jTextArea1, spilts[4]+"答应了您的请求，即将开始比赛");
                            writer.writeObject("EXIT");
                            dispose();
                            new PlayerCompeteJFrame(spilts[1]+"\n"+spilts[3]+" "+(spilts[5].equals("black")?"0":"1")).setVisible(true);
                        }
                    }
                    //如果读到的是Message对象
                    if (Message.class.isInstance(oj)) {
                        Message msg = (Message) oj;
                        jTextArea1.append(msg.getDate() + "\n" + msg.getFrom() + "对你发送了：\n" + msg.getMsg() + "\n\n\n");
                    }
                }
            } catch (EOFException ex) {
                System.out.println("读不到文件");
            } catch (IOException ex) {
                System.out.println("退出");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(LobbyFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (read != null) {
                        read.close();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(LobbyFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton blackRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JRadioButton whiteRadioButton;
    // End of variables declaration//GEN-END:variables
}
